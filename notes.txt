****** CD is a practice where code changes, once they pass through CI’s build and testing phases, are
        automatically prepared and ready for release to a production environment. 
        It always keeps the software in a release-ready state, dramatically simplifying the process of releasing updates and new features...

****** CD(continuous Delivery) and continuous deployment are closely related practices in software development that streamline the release process...
       CD ensures every code change is automatically built, tested, and prepared for release, allowing for manual deployment to production...

****** Continuous deployment goes a step further by automatically deploying every change that passes testing directly into production, eliminating manual steps... 
        This accelerates the release process but demands high confidence in automation and testing protocols...

#############################################################################################################################################        

DevOps: - A culture + set of practices combining development and operations. 
        - Focuses on automation, collaboration, continuous integration, continuous delivery (CI/CD). 
        - Goal: faster, more reliable software delivery.

GitOps: - An evolution of DevOps using Git as the single source of truth for infrastructure and app configurations. 
        - Changes are made via pull requests → automatically applied by automation tools (e.g., ArgoCD,Flux). 
        - Emphasizes declarative infrastructure + version control.

How They’re Tied:   - GitOps is a way to implement DevOps principles. 
                    - GitOps = concrete workflow using Git + automation to realize those practices.
                    - DevOps = culture + practices.
 
Usefulness in SDLC: - DevOps: ensures speed, quality, and collaboration across all phases of SDLC. 
                    - GitOps: strengthens reproducibility,security, and rollback in deployment & operations. 
                    - Together: they shorten feedback loops, reduce errors, and improve agility across the SDLC.

IaC involves managing and provisioning infrastructure via code rather than manual procedures...
GitOps extends the familiar Git version control system to infrastructure and deployment management and aligns closely with the principles of IaC                   

This integration allows developers to manage infrastructure configuration and code deployment as 
they would their software development process, bringing numerous advantages:

    • Accelerated production time:         Quicker infrastructure provisioning with reduced human error eads to more predictable outcomes...
    • Template-based reusability:          Use an IaC configuration file as a template, providing a baseline for further related configurations...
    • Uniform deployment:                  Achieve consistent infrastructure deployment, avoiding minor discrepancies that could lead to significant future issues...
    • Traceability and auditability:       Integrating IaC with a code repository for source tracking offers a detailed history of changes, including versioning and audit trails that identify who made  changes and when...
    • Enhanced organizational knowledge:   Versioning documents the rationale behind changes,creating a valuable resource for both new and existing employees...
    • Improved disaster recovery:          IaC ensures the ability to rapidly reconstruct environments inthe event of a failure, minimizing downtime and business disruption...

